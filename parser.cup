import java_cup.runtime.*;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

parser code 
{:
    public Map<Object, Object> variables = new HashMap<>();
    
    public String clearArg(String arg)
    {
      return arg.substring(1, arg.length() - 1);
    }

    public String reverse(String text)
    {
        String reverse = "";
        
        for(int i = text.length() - 1; i >= 0; i--)
        {
            reverse = reverse + text.charAt(i);
        }
        return reverse;
    }

    public String getFirstSub(String text)
    {
      return text.split("\\s")[0];
    }

    public String getLastSub(String text)
    {
      String[] arr = text.split("\\s");
      return arr[arr.length -1];
    }

    public String concat(List<String> list)
    {
      return list.stream().collect(Collectors.joining("", "{", "}"));
    }

    public String cutAt(String text, int start)
    {
      int startIndex = 0;
      int endIndex = text.length();

      if(start == text.length())
      {
        endIndex = text.lastIndexOf(" ") + 1 == 0 ? text.length() : text.lastIndexOf(" ") + 1;
      }
      else
      {
        startIndex = text.indexOf(" ") + 1;
      }

      return text.substring(startIndex, endIndex);
    }

:};

terminal           SEMI, DOUBLE_COLON;
terminal           ARG, VAR, ASSIGN, FUNCTION, PLUS, MINUS, TIMES, DIVIDE, LBRACKET, RBRACKET, COMMA;     
terminal           LENGTH, CONCAT, REVERSE, FSUB, LSUB, CFIRST, CLAST;
terminal Integer   NUMBER;

non terminal Object     expr_list, expr_part, expr, function, variable, arg, vname, math_expr, args_list, farg, list_expr, math_expr_rhs;
non terminal Integer    numb;

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

expr_list               ::= expr_list expr_part | expr_part;

expr_part               ::= expr:e
                            {: 
                                if(e != null)
                                {
                                    System.out.println(e); 
                                } 
                            :}
                            SEMI
                            ;

expr                    ::= function:f {: RESULT = f; :}
                            | 
                            variable;

function                ::= LENGTH DOUBLE_COLON farg:a
                            {:
                              RESULT = a.toString().length();
                            :}
                            |
                            REVERSE DOUBLE_COLON farg:a
                            {:
                              RESULT = reverse(a.toString());
                            :}
                            |
                            FSUB DOUBLE_COLON farg:a
                            {:
                              RESULT = getFirstSub(a.toString());
                            :}
                            |
                            LSUB DOUBLE_COLON farg:a
                            {:
                              RESULT = getLastSub(a.toString());
                            :}
                            |
                            CFIRST DOUBLE_COLON farg:a
                            {:
                              RESULT = cutAt(a.toString(), 0);
                            :}
                            |
                            CLAST DOUBLE_COLON farg:a
                            {:
                              RESULT = cutAt(a.toString(), a.toString().length());
                            :}
                            |
                            CONCAT DOUBLE_COLON list_expr:e
                            {:
                              RESULT = concat((List)e);
                            :}
                            |
                            FUNCTION DOUBLE_COLON farg:a
                            {:
                                RESULT = a;
                            :}
                            ;                     

farg                    ::= arg:a       {: RESULT = a; :} 
                            | 
                            vname:v     {: RESULT = variables.get(v).toString(); :} 
                            | 
                            function:f  {: RESULT = f; :} 
                            | 
                            math_expr:e {: RESULT = e; :} 
                            |
                            numb:n      {: RESULT = n.toString(); :} 
                            ;   

list_expr               ::= LBRACKET args_list:a RBRACKET {: RESULT = a; :};

args_list               ::= args_list:l COMMA farg:a 
                            {: 
                              ((List)l).add(a); 
                              RESULT = l; 
                            :} 
                            | 
                            farg:a 
                            {: 
                              List list = new ArrayList<>();
                              list.add(a);
                              RESULT = list; 
                            :};

math_expr               ::= numb:e PLUS math_expr_rhs:f 
                            {: 
                                RESULT = new Integer(e.intValue() + (int)f); 
                            :}
                            |
                            numb:e MINUS math_expr_rhs:f 
                            {: 
                                RESULT = new Integer(e.intValue() - (int)f); 
                            :}
                            |
                            numb:e TIMES math_expr_rhs:f 
                            {: 
                                RESULT = new Integer(e.intValue() * (int)f); 
                            :}
                            |
                            numb:e DIVIDE math_expr_rhs:f 
                            {: 
                                RESULT = new Integer(e.intValue() / (int)f); 
                            :}
                            ;

math_expr_rhs           ::= math_expr:e {: RESULT = e; :} 
                            | 
                            numb:n {: RESULT = n; :}
                            ;                                 

numb                    ::= NUMBER:n {: RESULT = new Integer(n.intValue()); :};         

variable                ::= vname:vn ASSIGN farg:a
                            {:
                                variables.put(vn, a);
                                RESULT = a;
                            :};

vname                   ::= VAR:v   {: RESULT = v; :};

arg                     ::= ARG:a   {: RESULT = clearArg(a.toString()); :};    